
D0003E_Lab_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cc7  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000970  00000000  00000000  00000ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000055b  00000000  00000000  00001867  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ac  00000000  00000000  00001dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000526  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000091e  00000000  00000000  00002496  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002db4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   8:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  10:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  14:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  18:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  1c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  20:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  24:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  28:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  2c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  30:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  34:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  38:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  3c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  40:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  44:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  48:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  4c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  50:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  54:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  58:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61
  68:	0e 94 65 00 	call	0xca	; 0xca <main>
  6c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

00000070 <__bad_interrupt>:
  70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000074 <init_lcd>:
	if(*latch == true) {
		LCDDR1 = LCDDR1 | 0b000000010;
		LCDDR0 = LCDDR0 ^ 0b000000100;
	} else {
		LCDDR1 = LCDDR1 ^ 0b000000010;
		LCDDR0 = LCDDR0 | 0b000000100;
  74:	80 ec       	ldi	r24, 0xC0	; 192
  76:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
  7a:	87 eb       	ldi	r24, 0xB7	; 183
  7c:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
  80:	87 e0       	ldi	r24, 0x07	; 7
  82:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
  86:	8f e0       	ldi	r24, 0x0F	; 15
  88:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
  8c:	08 95       	ret

0000008e <init_timer>:
  8e:	84 e0       	ldi	r24, 0x04	; 4
  90:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  94:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  98:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  9c:	08 95       	ret

0000009e <blink>:
  9e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  a2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  a6:	29 51       	subi	r18, 0x19	; 25
  a8:	36 48       	sbci	r19, 0x86	; 134
  aa:	e4 e8       	ldi	r30, 0x84	; 132
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	af ee       	ldi	r26, 0xEF	; 239
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	80 81       	ld	r24, Z
  b6:	91 81       	ldd	r25, Z+1	; 0x01
  b8:	82 17       	cp	r24, r18
  ba:	93 07       	cpc	r25, r19
  bc:	d9 f7       	brne	.-10     	; 0xb4 <blink+0x16>
  be:	8c 91       	ld	r24, X
  c0:	84 27       	eor	r24, r20
  c2:	8c 93       	st	X, r24
  c4:	29 51       	subi	r18, 0x19	; 25
  c6:	36 48       	sbci	r19, 0x86	; 134
  c8:	f5 cf       	rjmp	.-22     	; 0xb4 <blink+0x16>

000000ca <main>:
}

int main(void)
{
	// Setup the clockspeed
	CLKPR  = 0x80;
  ca:	e1 e6       	ldi	r30, 0x61	; 97
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	80 83       	st	Z, r24
	CLKPR  = 0x00;
  d2:	10 82       	st	Z, r1
	
	// Part 1
	init_lcd();
  d4:	0e 94 3a 00 	call	0x74	; 0x74 <init_lcd>
	//writeLong(123456);

	//primes(1);

	// Part 2
	init_timer();
  d8:	0e 94 47 00 	call	0x8e	; 0x8e <init_timer>
	blink();
  dc:	0e 94 4f 00 	call	0x9e	; 0x9e <blink>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
